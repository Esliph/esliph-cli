import { Injectable } from '@nestjs/common'
import { Result } from '@esliph/util-node'
import { z } from 'zod'
import { UseCase } from '@common/use-case'
import { ZodValidateService } from '@services/zod'
import { {{ capitalise name }}PropSelect } from '@modules/{{ name }}/repository/repository'
import { {{ capitalise name }}FindManyRepositoryAbstract } from '@modules/{{ name }}/repository/find.repository'

export class {{ capitalise name }}ListUseCaseDTO {}

export const {{ capitalise name }}ListUseCaseArgsSchema = z.object({})

const {{ capitalise name }}PropsSelected = {}

export type {{ capitalise name }}ListUseCaseArgs = z.input<typeof {{ capitalise name }}ListUseCaseArgsSchema>
export type {{ capitalise name }}ListUseCaseResponse = z.output<typeof {{ capitalise name }}ListUseCaseArgsSchema>
export type {{ capitalise name }}ListCasePerformResponseValue = { {{ plural name }}: {{ capitalise name }}PropSelect<{ select: typeof {{ capitalise name }}PropsSelected }>[] }
export type {{ capitalise name }}ListCasePerformResponse = Promise<Result<{{ capitalise name }}ListCasePerformResponseValue>>

@Injectable()
export class {{ capitalise name }}ListUseCase extends UseCase {
    constructor(private readonly list{{ capitalise name }}Repository: {{ capitalise name }}FindManyRepositoryAbstract) {
        super()
    }

    async perform(listArgs: {{ capitalise name }}ListUseCaseArgs): {{ capitalise name }}ListCasePerformResponse {
        try {
            const responsePerform = await this.performList(listArgs)

            return responsePerform
        } catch (err: any) {
            return this.extractError(err, { title: 'List {{ capitaliseAndPlural name }}', message: 'Cannot list {{ plural name }}' })
        }
    }

    private async performList(listArgs: {{ capitalise name }}ListUseCaseArgs): {{ capitalise name }}ListCasePerformResponse {
        const listArgsValidationResult = this.validateArgsProps(listArgs)

        const listArgsDTO = listArgsValidationResult.getValue()

        const performListRepositoryResult = await this.performListRepository(listArgsDTO)

        if (!performListRepositoryResult.isSuccess()) {
            return Result.failure(performListRepositoryResult.getError(), performListRepositoryResult.getStatus())
        }

        return Result.success<{{ capitalise name }}ListCasePerformResponseValue>(performListRepositoryResult.getValue(), performListRepositoryResult.getStatus())
    }

    private validateArgsProps(listArgs: {{ capitalise name }}ListUseCaseArgs) {
        const {{ name }}ListDTO = ZodValidateService.performParse(listArgs, {{ capitalise name }}ListUseCaseArgsSchema)

        return {{ name }}ListDTO
    }

    private async performListRepository(listArgs: {{ capitalise name }}ListUseCaseArgs) {
        const response = await this.list{{ capitalise name }}Repository.perform({ where: listArgs, select: {{ capitalise name }}PropsSelected })

        return response
    }
}
