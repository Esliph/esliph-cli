import { Injectable } from '@nestjs/common'
import { Result } from '@esliph/util-node'
import { z } from 'zod'
import { UseCase } from '@common/use-case'
import { ZodValidateService } from '@services/zod'
import { {{ capitalise name }}PropSelect } from '@modules/{{ name }}/repository/repository'
import { {{ capitalise name }}FindUniqueRepositoryAbstract } from '@modules/{{ name }}/repository/find.repository'

export class {{ capitalise name }}FindOneUseCaseDTO {}

export const {{ capitalise name }}FindOneUseCaseArgsSchema = ZodValidateService.defaultSchemaModelTable()

const {{ capitalise name }}PropsSelected = {}

export type {{ capitalise name }}FindOneUseCaseArgs = z.input<typeof {{ capitalise name }}FindOneUseCaseArgsSchema>
export type {{ capitalise name }}FindOneUseCaseResponse = z.output<typeof {{ capitalise name }}FindOneUseCaseArgsSchema>
export type {{ capitalise name }}FindOneUseCasePerformResponseValue = { {{ name }}: {{ capitalise name }}PropSelect<{ select: typeof {{ capitalise name }}PropsSelected }> }
export type {{ capitalise name }}FindOneUseCasePerformResponse = Promise<Result<{{ capitalise name }}FindOneUseCasePerformResponseValue>>

@Injectable()
export class {{ capitalise name }}FindOneUseCase extends UseCase {
    constructor(private readonly find{{ capitalise name }}Repository: {{ capitalise name }}FindUniqueRepositoryAbstract) {
        super()
    }

    async perform(findArgs: {{ capitalise name }}FindOneUseCaseArgs): {{ capitalise name }}FindOneUseCasePerformResponse {
        try {
            const responsePerform = await this.performFindOne(findArgs)

            return responsePerform
        } catch (err: any) {
            return this.extractError(err, { title: 'Find {{ capitalise name }}', message: 'Cannot find {{ name }}' })
        }
    }

    private async performFindOne(findArgs: {{ capitalise name }}FindOneUseCaseArgs): {{ capitalise name }}FindOneUseCasePerformResponse {
        const findArgsValidationResult = this.validateArgsProps(findArgs)

        const findArgsDTO = findArgsValidationResult.getValue()

        const performFindRepositoryResult = await this.performFindRepository(findArgsDTO)

        if (!performFindRepositoryResult.isSuccess()) {
            return Result.failure(performFindRepositoryResult.getError(), performFindRepositoryResult.getStatus())
        }

        return Result.success<{{ capitalise name }}FindOneUseCasePerformResponseValue>(performFindRepositoryResult.getValue(), performFindRepositoryResult.getStatus())
    }

    private validateArgsProps(findArgs: {{ capitalise name }}FindOneUseCaseArgs) {
        const {{ name }}FindDTO = ZodValidateService.performParse(findArgs, {{ capitalise name }}FindOneUseCaseArgsSchema)

        return {{ name }}FindDTO
    }

    private async performFindRepository(findArgs: {{ capitalise name }}FindOneUseCaseResponse) {
        const response = await this.find{{ capitalise name }}Repository.perform({ where: { id: findArgs.id }, select: {{ capitalise name }}PropsSelected })

        return response
    }
}
