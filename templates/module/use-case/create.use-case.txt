import { Injectable } from '@nestjs/common'
import { HttpEsliph, Result } from '@esliph/util-node'
import { z } from 'zod'
import { IsNotEmpty } from 'class-validator'
import { ZodValidateService } from '@services/zod'
import { ResultException } from '@util/exceptions/result.exception'
import { {{ capitalise name }}EntitySimple } from '@modules/{{ name }}/schema'
import { {{ capitalise name }}CreateRepositoryAbstract } from '@modules/{{ name }}/repository/create.repository'

export class {{ capitalise name }}CreateUseCaseDTO {
    /* Set the DTO properties to delete "{{ capitalise name }}" */
}

export const {{ capitalise name }}CreateUseCaseArgsSchema = z.object({
    /* Define the properties and their validations to create the "{{ capitalise name }}" */
})

export type {{ capitalise name }}CreateUseCaseArgs = z.input<typeof {{ capitalise name }}CreateUseCaseArgsSchema>
export type {{ capitalise name }}CreateUseCaseResponse = z.output<typeof {{ capitalise name }}CreateUseCaseArgsSchema>
export type {{ capitalise name }}CreateUseCasePerformResponseValue = { success: string }
export type {{ capitalise name }}CreateUseCasePerformResponse = Promise<Result<{{ capitalise name }}CreateUseCasePerformResponseValue>>

@Injectable()
export class {{ capitalise name }}CreateUseCase {
    constructor(private readonly create{{ capitalise name }}Repository: {{ capitalise name }}CreateRepositoryAbstract) { }

    async perform(createArgs: {{ capitalise name }}CreateUseCaseArgs): {{ capitalise name }}CreateUseCasePerformResponse {
        try {
            const responsePerform = await this.performCreate(createArgs)

            return responsePerform
        } catch (err: any) {
            if (err instanceof ResultException) {
                return err
            }

            return Result.failure({ title: 'Create {{ capitalise name }}', message: [{ message: 'Cannot create {{ name }}' }] }, HttpEsliph.HttpStatusCodes.BAD_REQUEST)
        }
    }

    private async performCreate(createArgs: {{ capitalise name }}CreateUseCaseArgs): {{ capitalise name }}CreateUseCasePerformResponse {
        const createArgsValidationResult = this.validateArgsProps(createArgs)

        const create{{ capitalise name }}ArgsValidated = createArgsValidationResult.getValue()

        const {{ name }}EntityTable = new {{ capitalise name }}EntitySimple(create{{ capitalise name }}ArgsValidated)

        const performCreate{{ capitalise name }}RepositoryResult = await this.performCreate{{ capitalise name }}Repository({{ name }}EntityTable)

        if (!performCreate{{ capitalise name }}RepositoryResult.isSuccess()) {
            return Result.failure(performCreate{{ capitalise name }}RepositoryResult.getError(), performCreate{{ capitalise name }}RepositoryResult.getStatus())
        }

        return Result.success({ success: '{{ capitalise name }} create successfully' }, HttpEsliph.HttpStatusCodes.CREATED)
    }

    private validateArgsProps(createArgs: {{ capitalise name }}CreateUseCaseArgs) {
        const {{ capitalise name }}CreateDTO = ZodValidateService.performParse(createArgs, {{ capitalise name }}CreateUseCaseArgsSchema)

        return {{ capitalise name }}CreateDTO
    }

    private async performCreate{{ capitalise name }}Repository({{ name }}Data: {{ capitalise name }}EntitySimple) {
        const response = await this.create{{ capitalise name }}Repository.perform({ data: {{ name }}Data })

        return response
    }
}