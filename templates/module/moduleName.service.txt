import { Injectable } from '@nestjs/common'
import { HttpEsliph, Result } from '@esliph/util-node'{{#if includeCrud}}{{#if isEntity}}
import { {{ capitalise name }}CreateUseCase, {{ capitalise name }}CreateUseCaseArgs } from '@modules/{{ name }}/use-case/create.use-case'
import { {{ capitalise name }}FindOneUseCase, {{ capitalise name }}FindOneUseCaseArgs } from '@modules/{{ name }}/use-case/find-one.use-case'
import { {{ capitalise name }}ListUseCase, {{ capitalise name }}ListUseCaseArgs } from '@modules/{{ name }}/use-case/list.use-case'
import { {{ capitalise name }}UpdateUseCase, {{ capitalise name }}UpdateUseCaseArgs } from '@modules/{{ name }}/use-case/update.use-case'
import { {{ capitalise name }}DeleteUseCase, {{ capitalise name }}DeleteUseCaseArgs } from '@modules/{{ name }}/use-case/delete.use-case'{{/if}}{{/if}}

@Injectable()
export class {{ capitalise name }}Service {
    constructor({{#if includeCrud}}{{#if isEntity}}
        private readonly createUC: {{ capitalise name }}CreateUseCase,
        private readonly listUC: {{ capitalise name }}ListUseCase,
        private readonly updateUC: {{ capitalise name }}UpdateUseCase,
        private readonly deleteUC: {{ capitalise name }}DeleteUseCase,
        private readonly findUC: {{ capitalise name }}FindOneUseCase{{/if}}{{/if}}
    ) { }
{{#if includeCrud}}{{#if isEntity}}
    async get{{ capitaliseAndPlural name }}(body?: {{ capitalise name }}ListUseCaseArgs) {
        try {
            const response = await this.listUC.perform({ ...body })

            return response
        } catch (err) {
            return Result.failure(
                { title: 'List {{ capitaliseAndPlural name }}', message: [{ message: 'Cannot get list {{ plural name }}', origin: 'ServerAPI' }] },
                HttpEsliph.HttpStatusCodes.INTERNAL_SERVER_ERROR
            )
        }
    }

    async get{{ capitalise name }}(body: {{ capitalise name }}FindOneUseCaseArgs) {
        try {
            const response = await this.findUC.perform({ ...body })

            return response
        } catch (err) {
            return Result.failure(
                { title: 'Find {{ capitalise name }}', message: [{ message: 'Cannot get {{ name }}', origin: 'ServerAPI' }] },
                HttpEsliph.HttpStatusCodes.INTERNAL_SERVER_ERROR
            )
        }
    }

    async create(body: {{ capitalise name }}CreateUseCaseArgs) {
        try {
            const response = await this.createUC.perform({ ...body })

            return response
        } catch (err: any) {
            return Result.failure(
                { title: 'Create {{ capitalise name }}', message: [{ message: 'Cannot create {{ name }}', origin: 'ServerAPI' }] },
                HttpEsliph.HttpStatusCodes.INTERNAL_SERVER_ERROR
            )
        }
    }

    async update(body: {{ capitalise name }}UpdateUseCaseArgs) {
        try {
            const response = await this.updateUC.perform({ ...body })

            return response
        } catch (err: any) {
            return Result.failure(
                { title: 'Update {{ capitalise name }}', message: [{ message: 'Cannot update {{ name }}', origin: 'ServerAPI' }] },
                HttpEsliph.HttpStatusCodes.INTERNAL_SERVER_ERROR
            )
        }
    }

    async delete(body: {{ capitalise name }}DeleteUseCaseArgs) {
        try {
            const response = await this.deleteUC.perform({ ...body })

            return response
        } catch (err: any) {
            return Result.failure(
                { title: 'Delete {{ capitalise name }}', message: [{ message: 'Cannot delete {{ name }}', origin: 'ServerAPI' }] },
                HttpEsliph.HttpStatusCodes.INTERNAL_SERVER_ERROR
            )
        }
    }{{/if}}{{/if}}
}