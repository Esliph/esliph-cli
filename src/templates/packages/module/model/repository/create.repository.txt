import { Injectable } from '@nestjs/common'
import { Result } from '@esliph/util-node'
import {
    {{ capitalise name }}ModelTableRepositoryAbstract,
    {{ capitalise name }}CreateArgs,
    {{ capitalise name }}CreateManyArgs,
    {{ capitalise name }}CreateResponse,
    {{ capitalise name }}CreateManyResponse
} from '@modules/{{ name }}/repository/repository'

export abstract class {{ capitalise name }}CreateRepositoryAbstract {
    perform: (args: {{ capitalise name }}CreateArgs) => Promise<Result<{{ capitalise name }}CreateResponse>>
}

@Injectable()
export class {{ capitalise name }}CreateRepository implements {{ capitalise name }}CreateRepositoryAbstract {
    constructor(private readonly repository: {{ capitalise name }}ModelTableRepositoryAbstract) {}

    async perform(args: {{ capitalise name }}CreateArgs): Promise<Result<{{ capitalise name }}CreateResponse>> {
        const response = await this.repository.create(args)

        return response
    }
}

export abstract class {{ capitalise name }}CreateManyRepositoryAbstract {
    perform: (args: {{ capitalise name }}CreateManyArgs) => Promise<Result<{{ capitalise name }}CreateManyResponse>>
}

@Injectable()
export class {{ capitalise name }}CreateManyRepository implements {{ capitalise name }}CreateManyRepositoryAbstract {
    constructor(private readonly repository: {{ capitalise name }}ModelTableRepositoryAbstract) {}

    async perform(args: {{ capitalise name }}CreateManyArgs): Promise<Result<{{ capitalise name }}CreateManyResponse>> {
        const response = await this.repository.createMany(args)

        return response
    }
}