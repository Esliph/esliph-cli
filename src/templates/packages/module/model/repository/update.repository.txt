import { Injectable } from '@nestjs/common'
import { Result } from '@esliph/util-node'
import {
    {{ capitalise name }}ModelTableRepositoryAbstract,
    {{ capitalise name }}UpdateResponse,
    {{ capitalise name }}UpdateArgs,
    {{ capitalise name }}UpdateManyResponse,
    {{ capitalise name }}UpdateManyArgs
} from '@modules/{{ name }}/repository/repository'

export abstract class {{ capitalise name }}UpdateRepositoryAbstract {
    perform: (args: {{ capitalise name }}UpdateArgs) => Promise<Result<{{ capitalise name }}UpdateResponse>>
}

@Injectable()
export class {{ capitalise name }}UpdateRepository implements {{ capitalise name }}UpdateRepositoryAbstract {
    constructor(private readonly repository: {{ capitalise name }}ModelTableRepositoryAbstract) {}

    async perform(args: {{ capitalise name }}UpdateArgs): Promise<Result<{{ capitalise name }}UpdateResponse>> {
        const response = await this.repository.update(args)

        return response
    }
}

export abstract class {{ capitalise name }}UpdateManyRepositoryAbstract {
    perform: (args: {{ capitalise name }}UpdateManyArgs) => Promise<Result<{{ capitalise name }}UpdateManyResponse>>
}

@Injectable()
export class {{ capitalise name }}UpdateManyRepository implements {{ capitalise name }}UpdateManyRepositoryAbstract {
    constructor(private readonly repository: {{ capitalise name }}ModelTableRepositoryAbstract) {}

    async perform(args: {{ capitalise name }}UpdateManyArgs): Promise<Result<{{ capitalise name }}UpdateManyResponse>> {
        const response = await this.repository.updateMany(args)

        return response
    }
}